runs:
  using: composite
  steps:
    - name: "Install NVM, Node.js, and Yarn"
      run: |
        if [ ! -d ~/.nvm ] ; then
          touch $HOME/.bash_profile
          cd ..
          echo $HOME
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          mkdir $NVM_DIR
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
          echo "source $NVM_DIR/nvm.sh --install" >> "$HOME/.bash_profile"
          cd -
          source $HOME/.bash_profile
          echo "lts/*" > .nvmrc
          nvm install
        fi
        # install yarn
        npm install --location=global yarn
        if [ ! -d frontend/node_modules ] ; then
          source "$HOME/.nvm/nvm.sh"
          make react-init
        fi
      shell: bash
    - name: Install pyodbc dependencies
      run: |
        ${SUDO} apt-get install -y unixodbc-dev
      shell: bash
    - name: Install graphviz dependencies
      run: |
        ${SUDO} apt update
        ${SUDO} apt-get install -y libgvc6
      shell: bash
    - name: Cache Venv
      id: cache-venv
      uses: actions/cache@v3
      with:
        path: venv
        key: ${{ runner.os }}-venv
    - name: Create Virtualenv
      # if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        make setup
        make pipenv-install
        deactivate

        # Add 'activate venv' to $HOME/.bash_profile. This means that our venv will be active
        # for the remainder of the job ($HOME/.bash_profile is evaluated at each step).
        echo 'source venv/bin/activate' >> $HOME/.bash_profile
      shell: bash
    - name: generate_protobufs
      run: |
        source $HOME/.bash_profile
        # install protobuf v3
        ${SUDO} apt update
        ${SUDO} apt-get install -y gnupg
        ${SUDO} pip install mypy-protobuf
        echo "deb http://ppa.launchpad.net/maarten-fonville/protobuf/ubuntu trusty main" | ${SUDO} tee /etc/apt/sources.list.d/protobuf.list
        ${SUDO} apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4DEA8909DC6A13A3
        ${SUDO} apt update
        ${SUDO} apt-get install -y protobuf-compiler
        # Generate protobufs
        make protobuf
      shell: bash